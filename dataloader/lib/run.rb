require 'json'
require 'logger'
require_relative 'firebase'
require_relative 'location_parser'
require_relative 'schedule_parser'

class Main
  POOL_LOCATIONS_FILE = '../static_data/pools.xml'

  SCHEDULE_URLS_TO_SCRAPE = [
    'https://www.toronto.ca/data/parks/prd/swimming/dropin/leisure/index.html',
    'https://www.toronto.ca/data/parks/prd/swimming/dropin/family/index.html',
    'https://www.toronto.ca/data/parks/prd/swimming/dropin/female/index.html',
    'https://www.toronto.ca/data/parks/prd/swimming/dropin/lane/index.html'
  ]

  def initialize
    @logger = Logger.new(STDOUT)
    @logger.level = Logger::INFO
    @firestore = PoolfinderFirestore.new
  end

  def run
    locations = LocationParser.parse(POOL_LOCATIONS_FILE)
    total_schedule = parse_total_schedule

    write_locations_js(locations)
    log_non_existant_locations(locations, total_schedule)
    send_locations_to_firestore(locations, total_schedule)
  end

  private

  def parse_total_schedule
    SCHEDULE_URLS_TO_SCRAPE.flat_map do |url|
      @logger.info("Scraping url \"#{url}\"...")
      ScheduleParser.parse_swim_times(url)
    end
  end

  def write_locations_js(locations)
    File.open('../../client/src/js/locations.js', 'w') do |file|
      file.write("// THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT IT DIRECTLY!\n")
      file.write("export default #{jsonify(locations)};")
      # TODO: We can write the time we pulled the data into this file and display it on the frontend
    end
  end

  def jsonify(hashmap)
    JSON.generate(hashmap, space: ' ', indent: '  ', object_nl: "\n")
  end

  def log_non_existant_locations(locations, total_schedule)
    all_location_ids = locations.map { |pool| pool[:id] }
    location_ids_from_schedule = total_schedule.map { |location| location[:location_id] }.uniq
    non_existant_locations = location_ids_from_schedule - all_location_ids
    non_existant_locations.each { |id| @logger.warn("Location with ID [#{id}] not in locations list") }
  end

  def send_locations_to_firestore(locations, total_schedule)
    locations
      .map do |location|
        location[:schedule] = total_schedule
          .select { |s| s[:location_id] == location[:id] }
          .map do |s|
            {
              from: s[:from],
              to: s[:to],
              activity: s[:activity],
            }
          end
        location
      end
      .each { |location| @firestore.create_or_update_location(location) }
  end
end

Main.new.run
